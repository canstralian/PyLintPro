name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Cancel any in-progress runs on the same branch to save resources
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    # Matrix across OSes and Python versions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flake8 (strict then permissive)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || exit 1
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run tests & generate coverage
        run: |
          pytest --maxfail=1 --disable-warnings --cov=./ --cov-report=xml

      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1
        with:
          filename: 'coverage.xml'
          badge: true
          format: 'markdown'
          output: 'both'

      - name: Append coverage summary to job summary
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Cloud (example)
        run: |
          echo "Deploying application..."

      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: production
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'CI Pipeline completed with status ${{ job.status }}'